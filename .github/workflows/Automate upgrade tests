name: Upgrade Tests
on:
  schedule:
    - cron: "* 22 * * *"
  workflow_dispatch:
jobs:
  install:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: "11"
          distribution: "adopt"
      - name: Generating Data Models
        run: |
          sudo apt-get install -y antlr4
          make install_dev generate
      - name: Start Server and Ingest Sample Data
        env:
          INGESTION_DEPENDENCY: "all"
        run: |
          ./docker/run_local_docker.sh
          pip install --upgrade "openmetadata-ingestion[mysql,elasticsearch]==0.10.0"
        timeout-minutes: 20
      - name: Upgrade Instance
        run: |
          cd docker/local-metadata/ && docker-compose down
          ./bootstrap/bootstrap-storage.sh migrate-all
          ./docker/run_local_docker.sh
      - name: Run Cypress Tests
        uses: cypress-io/github-action@v2
        with:
          install: false
          record: true
          parallel: true
          working-directory: openmetadata-ui/src/main/resources/ui/
          wait-on: "http://localhost:8585"
          browser: chrome
        env:
          CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
          CYPRESS_SNOWFLAKE_USERNAME: ${{ secrets.CYPRESS_SNOWFLAKE_USERNAME }}
          CYPRESS_SNOWFLAKE_PASSWORD: ${{ secrets.CYPRESS_SNOWFLAKE_PASSWORD }}
          CYPRESS_SNOWFLAKE_ACCOUNT: ${{ secrets.CYPRESS_SNOWFLAKE_ACCOUNT }}
          CYPRESS_SNOWFLAKE_DATABASE: ${{ secrets.CYPRESS_SNOWFLAKE_DATABASE }}
          CYPRESS_SNOWFLAKE_WAREHOUSE: ${{ secrets.CYPRESS_SNOWFLAKE_WAREHOUSE }}
          CYPRESS_BQ_PRIVATE_KEY: ${{ secrets.CYPRESS_BQ_PRIVATE_KEY }}
          CYPRESS_BQ_PROJECT_ID: ${{ secrets.CYPRESS_BQ_PROJECT_ID }}
          CYPRESS_BQ_PRIVATE_KEY_ID: ${{ secrets.CYPRESS_BQ_PRIVATE_KEY_ID }}
          CYPRESS_BQ_CLIENT_EMAIL: ${{ secrets.CYPRESS_BQ_CLIENT_EMAIL }}
          CYPRESS_BQ_CLIENT_ID: ${{ secrets.CYPRESS_BQ_CLIENT_ID }}
          CYPRESS_REDSHIFT_HOST: ${{ secrets.CYPRESS_REDSHIFT_HOST }}
          CYPRESS_REDSHIFT_USERNAME: ${{ secrets.CYPRESS_REDSHIFT_USERNAME }}
          CYPRESS_REDSHIFT_PASSWORD: ${{ secrets.CYPRESS_REDSHIFT_PASSWORD }}
          CYPRESS_REDSHIFT_DATABASE: ${{ secrets.CYPRESS_REDSHIFT_DATABASE }}
          CYPRESS_METABASE_USERNAME: ${{ secrets.CYPRESS_METABASE_USERNAME }}
          CYPRESS_METABASE_PASSWORD: ${{ secrets.CYPRESS_METABASE_PASSWORD }}
          CYPRESS_METABASE_DB_SERVICE_NAME: ${{ secrets.CYPRESS_METABASE_DB_SERVICE_NAME }}
          CYPRESS_METABASE_HOST_PORT: ${{ secrets.CYPRESS_METABASE_HOST_PORT }}
          CYPRESS_SUPERSET_USERNAME: ${{ secrets.CYPRESS_SUPERSET_USERNAME }}
          CYPRESS_SUPERSET_PASSWORD: ${{ secrets.CYPRESS_SUPERSET_PASSWORD }}
          CYPRESS_SUPERSET_HOST_PORT: ${{ secrets.CYPRESS_SUPERSET_HOST_PORT }}
          CYPRESS_KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.CYPRESS_KAFKA_BOOTSTRAP_SERVERS }}
          CYPRESS_KAFKA_SCHEMA_REGISTRY_URL: ${{ secrets.CYPRESS_KAFKA_SCHEMA_REGISTRY_URL }}
          CYPRESS_GLUE_ACCESS_KEY: ${{ secrets.CYPRESS_GLUE_ACCESS_KEY }}
          CYPRESS_GLUE_SECRET_KEY: ${{ secrets.CYPRESS_GLUE_SECRET_KEY }}
          CYPRESS_GLUE_AWS_REGION: ${{ secrets.CYPRESS_GLUE_AWS_REGION }}
          CYPRESS_GLUE_ENDPOINT: ${{ secrets.CYPRESS_GLUE_ENDPOINT }}
          CYPRESS_GLUE_STORAGE_SERVICE: ${{ secrets.CYPRESS_GLUE_STORAGE_SERVICE }}
          CYPRESS_GLUE_PIPELINE_SERVICE: ${{ secrets.CYPRESS_GLUE_PIPELINE_SERVICE }}

          # Recommended: pass the GitHub token lets this action correctly
          # determine the unique run id necessary to re-run the checks
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
