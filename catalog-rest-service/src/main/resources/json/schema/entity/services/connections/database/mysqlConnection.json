{
  "$id": "https://open-metadata.org/schema/entity/services/connections/database/mysqlConnection.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MysqlConnection",
  "description": "Mysql Database Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.catalog.services.connections.database.MysqlConnection",
  "definitions": {
    "mySQLType": {
      "description": "Service type.",
      "type": "string",
      "enum": ["MySQL"],
      "default": "MySQL"
    },
    "mySQLScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": ["mysql+pymysql"],
      "default": "mysql+pymysql"
    }
  },
  "properties": {
    "type": {
      "description": "Service Type",
      "$ref": "#/definitions/mySQLType",
      "default": "MySQL"
    },
    "scheme": {
      "description": "SQLAlchemy driver scheme options.",
      "$ref": "#/definitions/mySQLScheme",
      "default": "mysql+pymysql"
    },
    "username": {
      "description": "username to connect  to the SingleStore. This user should have privileges to read all the metadata in SingleStore.",
      "type": "string"
    },
    "password": {
      "description": "password to connect  to the SingleStore.",
      "type": "string",
      "format": "password"
    },
    "hostPort": {
      "description": "Host and port of the data source.",
      "type": "string"
    },
    "database": {
      "description": "Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank , OpenMetadata Ingestion attempts to scan all the databases in SingleStore.",
      "type": "string"
    },
    "connectionOptions": {
      "$ref": "connectionBasicType.json#/definitions/connectionOptions"
    },
    "connectionArguments": {
      "$ref": "connectionBasicType.json#/definitions/connectionArguments"
    },
    "supportedPipelineTypes": {
      "description": "Supported Metadata Extraction Pipelines.",
      "type": "string",
      "items": {
        "type": "string",
        "enum": ["Metadata"]
      },
      "default": ["Metadata"]
    }
  },
  "additionalProperties": false
}
