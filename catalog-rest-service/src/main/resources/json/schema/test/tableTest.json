{
  "$id": "https://open-metadata.org/schema/test/tableTest.json",
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "TableTest",
  "description": "TableTest is a test definition to capture data quality tests against tables and columns.",
  "type": "object",
  "definitions": {
    "testCase": {
      "description": "Table Test Case.",
      "type": "object",
      "properties": {
        "config": {
          "oneOf": [
            {
              "title": "TableRowCountToEqual",
              "description": "This schema defines the test TableRowCountToEqual. Test the number of rows equal to a value.",
              "type": "object",
              "javaType": "org.openmetadata.catalog.entity.tests.table.TableRowCountToEqual",
              "properties": {
                "value": {
                  "description": "Expected number of rows {value}",
                  "type": "integer"
                }
              },
              "required": ["value"]
            },
            {
              "title": "TableRowCountToEqual",
              "description": "This scheam defines the test TableRowCountToBeBetween. Test the number of rows to between to two values.",
              "type": "object",
              "javaType": "org.openmetadata.catalog.entity.tests.table.TableRowCountToBeBetween",
              "properties": {
                "minValue": {
                  "description": "Expected number of rows should be greater than or equal to {minValue}. If minValue is not included, maxValue is treated as upperBound and there will be no minimum number of rows",
                  "type": "integer"
                },
                "maxValue": {
                  "description": "Expected number of rows should be lower than or equal to {maxValue}. if maxValue is not included, minValue is treated as lowerBound and there will eb no maximum number of rows",
                  "type": "integer"
                }
              },
              "anyOf": [
                { "required": ["minValue"] },
                { "required": ["maxValue"] }
              ],
              "additionalProperties": false
            },
            {
              "title": "TableRowCountToEqual",
              "description": "This scheam defines the test TableColumnCountToEqual. Test the number of columns equal to a value.",
              "type": "object",
              "javaType": "org.openmetadata.catalog.entity.tests.table.TableRowCountToEqual",
              "properties": {
                "value": {
                  "description": "Expected number of columns to equal to a  {value}",
                  "type": "integer"
                }
              },
              "required": ["value"],
              "additionalProperties": false
            }
          ]
        },
        "testType": {
          "enum": [
            "tableRowCountToEqual",
            "tableRowCountToBeBetween",
            "tableColumnCountToEqual"
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "properties": {
    "id": {
      "description": "Unique identifier of this table instance.",
      "$ref": "../type/basic.json#/definitions/uuid"
    },
    "name": {
      "description": "Name that identifies this test case.",
      "type": "string",
      "minLength": 1,
      "maxLength": 128
    },
    "description": {
      "description": "Description of the testcase.",
      "type": "string"
    },
    "tableName": {
      "description": "Table Name for which this test applies.",
      "type": "string"
    },
    "testCase": {
      "$ref": "#/definitions/testCase"
    },
    "executionFrequency": {
      "$ref": "./basic.json#/definitions/testCaseExecutionFrequency"
    },
    "results": {
      "description": "List of results of the test case.",
      "type": "array",
      "items": {
        "$ref": "./basic.json#/definitions"
      }
    },
    "owner": {
      "description": "Owner of this Pipeline.",
      "$ref": "../type/entityReference.json",
      "default": null
    },
    "updatedAt": {
      "description": "Last update time corresponding to the new version of the entity in Unix epoch time milliseconds.",
      "$ref": "../type/basic.json#/definitions/timestamp"
    },
    "updatedBy": {
      "description": "User who made the update.",
      "type": "string"
    },
    "deleted": {
      "description": "When `true` indicates the entity has been soft deleted.",
      "type": "boolean",
      "default": false
    }
  },
  "required": ["name", "testCase", "tableName"],
  "additionalProperties": false
}
