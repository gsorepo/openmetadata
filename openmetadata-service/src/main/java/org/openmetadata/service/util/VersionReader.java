/*
 *  Copyright 2021 Collate
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *  http://www.apache.org/licenses/LICENSE-2.0
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.openmetadata.service.util;

import java.io.IOException;
import java.io.InputStream;
import java.util.Properties;

public class VersionReader {
  
  public static final String VERSION = loadVersion();
  
  private static String loadVersion() {
    // First, try the same approach as VersionResource - read from /catalog/VERSION
    // This file is generated by the buildnumber-maven-plugin during build
    try (InputStream fileInput = VersionReader.class.getResourceAsStream("/catalog/VERSION")) {
      if (fileInput != null) {
        Properties props = new Properties();
        props.load(fileInput);
        String version = props.getProperty("version");
        if (version != null && !version.trim().isEmpty()) {
          return version;
        }
      }
    } catch (IOException e) {
      // Continue to next approach
    }
    
    // Second, try the filtered version.properties (contains version=${project.version})
    try (InputStream input = VersionReader.class.getResourceAsStream("/version.properties")) {
      if (input != null) {
        Properties prop = new Properties();
        prop.load(input);
        String version = prop.getProperty("version");
        if (version != null && !version.trim().isEmpty() && !version.contains("${")) {
          return version;
        }
      }
    } catch (IOException e) {
      // Continue to next approach
    }
    
    // Try Maven-generated pom.properties
    try (InputStream input = VersionReader.class.getResourceAsStream("/META-INF/maven/org.open-metadata/openmetadata-service/pom.properties")) {
      if (input != null) {
        Properties prop = new Properties();
        prop.load(input);
        String version = prop.getProperty("version");
        if (version != null && !version.trim().isEmpty()) {
          return version;
        }
      }
    } catch (IOException e) {
      // Continue to next approach
    }
    
    // Try to get from Package manifest
    try {
      Package pkg = VersionReader.class.getPackage();
      if (pkg != null && pkg.getImplementationVersion() != null) {
        return pkg.getImplementationVersion();
      }
    } catch (Exception e) {
      // Continue to fallback
    }
    
    // Final fallback - this should match the current pom.xml version
    return "1.8.0-SNAPSHOT";
  }
}